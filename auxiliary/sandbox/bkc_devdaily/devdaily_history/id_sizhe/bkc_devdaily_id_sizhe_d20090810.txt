>[recording happily]


>[tiny unit]

>
时间段:20091115-2009xxxx
模块们:bkc_regex


>
20091127
>>

















>
20091126
>>
[add]
添加了bkc_pthread模块，这个模块老早以前就想添加了.

>>
Destroyed



>
20091121
>>
BKC_CKPRET
这个函数目前看来似乎没有用到，需要看看设计时的意图.
[cmt]回忆起来了，这个函数是用来返回之前检查返回值的.
>>
考虑一下是否可以用一个临时的指针ck来替代所有的下文ck.
这样是否安全就决定于检查的开始了，所以使用指针之前要添加一个检测语句，
这可能带来轻微的负担，但有时是值得的.
[cmt]想了一个如下的对策:统一用chsthrow, 避免视觉负担.

>>
发现功能模块还是不能一个.h了事，而是要把公共模块中(提供给用户的.h)统一用到的定义放到另一个文件，
其他此功能模块的小模块要用到这个模块时，只包含另一个def文件，在整个.h中包含多个子.h.
名字等下再来好好取一个.暂时都用.def.

>>
[Q | lk]
注意目前spf并不完全隔离c的功能, 简单的遵从需要才包含，把对NULL的依赖放到了用户的的责任里面，
用户必须手动包含stdlib.h, 如果能把NULL重新定义成BKC_NULL再作整体修改.
同样对于int, unsigned int 的使用不作限制,
有必要有一个固定长度的机制，使用的时候包含就可以.
反观要制作的类型:bool, null, 定长整型就ok了，名字不要太长.

>>
BKC_FC_PCK 已定义，但是否要用需要再考虑一下, 多一个名字多一个记忆的难度.


>>
刚刚突然想到一件事情,那就是，包含头文件的时候，把标准的库的头文件包含放到最后，
这样可以一定程度上发现和避免用户头文件的包含.


>>
记得函数写好以后整理一下描述，去掉不必要的实现说明.


>>
当前认为,除非bkc_libc已经比较完善了，否则标准头文件的包含如<stdlib.h>
还是应该由用户自己来作而不应该在bkc_libc.h来做(用则包含的原则).

>>
[Q]
等下要试试如果一个宏需要参数，但又没有传入参数，这时宏里面怎么样处理这个值.
还要看看 return (); 这样的表达合法与否.


>>
[tu]
bkc_string.c中有switch分支中default那一条没有完全错误返回.


>>
[ch]
#define BKC_FC_CKTHR              BKC_REGEX_SPF_CKTHROW
已经在模板中去掉，以后可以只用BKC_FC_CKSTHR
同时增加了
#define BKC_FC_ERRTHR             BKC_REGEX_SPF_ERRTHROW
#define BKC_FC_SUCTHR             BKC_REGEX_SPF_SUCTHROW
来处理正确和错误的直接退出，并且
增加了


>>
[ta ｜ ts]
发现bkc_string模块中缺少这四个个功能的函数
指定开始位置和长度的比较.
int bkc_string_specmp(bkc_string_t *dstr_p, bkc_string_t *sstr_p);
指定开始位置和长度的dup.
bkc_string_specdup(bkc_string_t *str_p);
bkc_string_speccpy
bkc_string_getnchar
bkc_string_insnchar
int bkc_string_cpyspec(bkc_string_t *dstr_p, int dpos, bkc_string_t *sstr_p,
        int spos, int *len_p, bkc_string_cpy_mode_m mode);

int bkc_string_cmpspec(bkc_string_t *dstr_p, int dspos , int dlen,
bkc_string_t *sstr_p, int sspos, int slen);

int bkc_string_insnchar(bkc_string_t *str_p, int pos, char ch);

char bkc_string_getnchar(bkc_string_t *dstr_p, int pos);

ok, 马上添加.
现在只添加了函数的声明，等下来添加其实现和测试.


>>
ok
今天也可乘机对string的操作类做一个总结:
1. copy(override:change, insert: append_str/char, insnchar, getnchar)
2. dup
3. cmp
4  get_info(len, empty)
5. sandbox

>>
[tu]
准备修改int bkc_string_appd(bkc_string_t *dstr_p, bkc_string_t *sstr_p,
        char *stext_p);这个函数以保持接口设计的完整，需要查看一下调用它的地方.
准备要做的修改是: 添加一个ch参数.

>>
[tu]
模板中准备要添加BKC_CR来替代BKC_CKRET,这个在regex模块中已经进行了替代.
另外一个也准备要缩减BKC_FC_CKSTHR 要换成BKC_FC_CT
BKC_FC_RT 也要替换RELAYTHROW了


>>
[tu]
bkc_string_appd已被修改，然后需要做的是在test中测试这个修改.

>>
[tu]
bkc_string中应该缺少左右移动的功能.可以尝试加入.
到时候bkc_string_insnchar就可以只用这个来实现了.





>
20091115
>>
int bkc_regex_spat_destroy(bkc_regex_spat_t *spat_p);
>>
等下在每个模块中要添加如何使用这些模块的指引，即参考哪个test.


>[###########################tiny unit\]








>[eys on me]

>outlook
>>
  keep on and happy on.
>>
  加入libc模块［tbc］

>>
  列入加入的模块:
  libc [未完]
  dutil [未完]
  btree ［未完］

>>
  近期的小目标:


>log

>>
  [date] 20091019

>>>
  今天把bkc_libc.h的函数原型定义添加了，恩，对原来的知识也是一个回顾.
  累晕了，睡一下，明天再接着弄. 不停被打断，不停继续啊.

>>
  [date] 20091013

>>>
  调通了libc模块的编译，看来这确实是个费时间的过程， 以后得像个办法自动化模块的添加和和删除，
  最好是必须的头，源文件也可以根据模块名字来自动生成 .





>>
  [date] 20091010

>>>
  今天突然想通了，modps不需要，不需要每个模块都统一下层接口，
  这样会给模块的调试丢掉灵活性，所以整理模块时要注意一定的原则，
  在这里就是:给每个模块尽量的独立性，可读性。有时可以为这个多花点
  时间来编码，来复制粘贴.

>>>
  对于dutil的规划目前是这样的:
  简单起见，用一个小模块来抽象，这样给用户减轻负担，只需要包含一个
  dutil.h就可以使用了，但起内部需要一些细分的模块。

  单层结构结构目录，用文件名来区分层次, 这也是值得尝试的一个方面。
  可能以后还有很多地方用得着这个办法，

  可以任意添加单独的模块，模块细分是目标但注意，可合并来增加可理解性时，
  尽量合并，以后可以逐步划分， 这是一个策略问题。首先分散，根据需要合并，
  根据需要分散，根据需要合并...目的就是可理解，可维护。
   很多时候，我们是处于第一步骤（分散）和第二步骤（首次合并）就满足需要了。

   Dutil  的划分结构如下 :

   dutil_memo
   dutil_pthread

>>>
  [ntbd]
   可整理一下模块的划分图

>>>
  [gidea]
  libc中应该有一个固定长度字节的定义. 这个可以方便的给出需要

>>>
 ［fgot］
   此刻，悟道了一个开发心态:时刻准备记录， 时刻准备忘记。
  你所看到的就是目前有道理存在的， 忘记的东西不要刻意去想起，
  因为如果真的很好， 总会在一个合适的时机再想起， 那是考虑会更加完善。
  所以首先要经常记录， 再经常忘记， 精华会重现， believe ， this is life.

>>
  [gidea]
  刚刚想到cpu状态模块，目前把他放在dutil之外，呵呵。总会有地方方他的，
  如果它很有用的话.

>>
  [date] 20091009
>>>
  今天把modps已经加入了工程, 接下来就是要在libc模块中使用和测试这个
  模块.

  keep on and happy on.

>[################################eys on me\]



>[module libc]

>>
  [todo]
  libc 模块已经加入，但所有的函数名字都没有改变.
  所以想建造一个公共的调试模块，以后就不用为单独的模块进行添加了.
  可这样做也有不方便的地方，所有模块的调试接口都一致，是否会
  减弱灵活性. 统一起来有好处. 也有不好的地方.

  但使用统一的调试机制是比较方便的做法，所以，目前策略是：
  提供这样一个统一调试机制，对于以前的模块可以逐渐演化成采用
  统一的调试机制.需要添加一个模块替换的列表. mod_support_replace.txt
  记录哪些模块是已经被替换的，那些还没有.


>>
  [note err]

gcc -fno-exceptions -DLINUX -D_GNU_SOURCE=1 -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -DBSTD_CPU_ENDIAN=BSTD_ENDIAN_LITTLE -DB_SYSTEM_linux=1 -D_linux_ -I ./ -I/home/sanyk/hut/project/bkc/src/bkc_modps/include -I/home/sanyk/hut/project/bkc/include /home/sanyk/hut/project/bkc/src/bkc_modps/test/bkc_modps_test.c -o bkc_modps_test -lm -L/home/sanyk/hut/project/bkc/src/bkc_modps/lib -lbkc_modps
/usr/bin/ld: cannot find -lbkc_modps
collect2: ld 返回 1
make: *** [test] 错误 1

   这段错误经常发生，原因就是在写makefile时，把库名libxxx.a中lib给丢掉，注意这个问题.


>[#############################module libc\]



>
>[module regex]
>14:33 2009-8-26
>

>[things to do]
 详细，彻底地测试stack, queue中的每一个函数
 stack, queue ,regex 模块的文档要及时的加入.

>[Important things tag]
 14:34 2009-8-26
 今天加入了regex 模块，正式启动了regex的进程.
 this is wonderfull. keep on.

>[some consideration]
 如果说要保持模块间的灵活，
 那么怎么样使得裁掉一个库，把依赖于此库的库一起裁掉呢?

>15:05 2009-8-27

>[things to do]
 weather 在工程中有的地方被拼成了weather, 查查，然后
 修改.

>今天决定了几个命名和分类策略.
 1. 需要什么就包含什么
 2. 用户需要的是什么，就包含什么的头文件，让用户明确.
 3. 每个xxx.c 有以下两个相关文件
    xxx.h
    xxx_def.h
    前者描述的是提供给用户的信息-什么东西
    后者描述的是隐藏的，或用户不需要的信息，但模块内部需要用到-东西内部的结构

    从而如果一个辅助模块只是需要这个模块的帮助，只需要包含 xxx.h就可以了，

    如果这个辅助模块需要增强这个模块，则需要包含两个层次的信息:
    xxx.h知道了有什么
    xxx_def.h知道这个什么的具体细节，以便利用和改造
    从而这个模块可以成为这个模块的一个增强.


>13:00 2009-8-31

>[things to do]
 今天 调通了bkc_stack模块的测试，
 其实，发现一个很大的规律：
 如果发现要正常返回，而反回值又是一个异常值，这其中一定是有逻辑冲突，
 注意一件事，权衡一下，是返回值错误，还是不需要正常返回，
 思考到这里就会发现原来的一些问题

>[adding]
 stack.h 中添加了打印和内存检测的语句.


>[date 13:35 2009-9-2]
>[ttd/(things to do)]
 一些主要的文档要考虑用版本号来命名


>[date 14:09 2009-9-3]


>[date 13:47 2009-9-4]
>自结束的指令


#############################





>
>[module stack ]
>[20:13 2009-8-10]
>

>bkc 今天要尽量做到，把栈的数据结构添加上去。

>收尾的一些工作：
 把stack中每个文件头换一下，换成现在的时间。

>注意，bkc_module这个文件夹需要整理一下
 以便生成新的module这个模块

>[10:02 2009-8-12]
>两个接口的设计
 bkc_stack_t *bkc_stack_create(void);
 int bkc_stack_destroy(bkc_stack_t * stack_p);

>[10:05 2009-8-13]
>bkc_stack_create
 刚写到一半，居然被打断了，ok。工作就是被用来打断的.
>pub_out pub_inn 这个机制要改
 也就是说，不管是pub_out, pub_inn, 所有的文件头必须
 都能包含到
>随时保存，这是正道

>/home/tsz/bkc/src/bkc_stack/src/bkc_stack.c:65: 错误：声明指定了两个以上的数据类型
/home/tsz/bkc/src/bkc_stack/src/bkc_stack.c:66: 错误：函数声明定义为 ‘typedef’
 这是由于类型没有定义完全：如少了一边括号.

>[13:45 2009-8-17]
>犯了一个重复的错误
typedef struct bkc_stack_tag_s {
    bkc_dlist_t *dlist_p;
}bkc_stack_tag_t;
与
struct bkc_stack_tag_t {
    bkc_dlist_t *dlist_p;
}
是不同的

>bkc_stack_destroy的编写让我突然想起一个问题
 一个stack如果没有空，是否应该删除呢，
 答案是，应该。

 数据不为空应该给用户一个提示。
 但不是错误.


 [往往在需要
  间接释放内存的时候用直接的指针来操作，避免中间指针的释放.

 中间会涉及到=这种强可依赖的操作，
 对于这种强可信赖的操作如 =，我们的处理是要返回，
 我们认为，对于强可依赖的操作都出错了，肯定
 是程序的问题， 一定要返回，不能继续下去了.
 ]


>10:31 2009-8-18
>有时候我们会认为，释放以后再制空某个指针会降低速度，
 不尽然，目前我们的认识是：一个操作如果能带来安全，又不给
 阅读造成障碍，应该使用.

>bkc 提示分类
 warn
 error
 每一类可以再细分：
 error:
     [func return]:函数返回错误


>[list to do]
 bkc 的dlist  中缺少删除头，删除尾的操作，
 这个在实际中还是很常用的，
 今天尽量加上，尽管可以先用找到头，再删除的方法，
 但感觉还是不如直接操作方便

>我们认为在catch语句中进行错误的逐层退出是有必要的，

 下面加深对catch子句的理解：
  1. 是程序身体的一个部分，不可分割，如果这部分代码处理出错了，
     就说明是整个程序运行环境有出错了，返回值应该是错误代码处理
     的值，而不是进入错误处理代码的值. 这时统一用err来替代就可以了.
     其设定为不再抛出异常(把抛出异常的语句部分的值置为0，意味着正常，
     从而其后也不需要再加catch语句的，否则catch后再加catch,没完了.
     也就是说，需要确定每个catch语句最后是否可以添加一个清除terror
     的代码, 这在需要处理catch中抛出异常是有用的.这个功能已经在
     stack中添加了，现在不需要用，以后用的地方也很少，只在
     catch后面还需要错误处理的地方，少吧，多级别的错误处理，目前
     认为是冗余的
     )

>下面对流程的返回控制进一步加强：
  1. errthrow(“错误原因”,其他属性)错误返回，提示错误消息
  2. sucret(正常返回值, 其他属性)，不需要提示错误消息，但要提供返回地点.
         并且这个返回地点的打印是可以控制关闭还是打开的，
         在跟踪程序的时候，这个很有用.尤其是很多地方都返回同一个正常值的时候.
         一般情况下外部不关心程序是从哪个点正常返回的.

>现在加强对函数返回值判断的体系，
  对每个内部调用的函数都要加返回值的判断，这成为整个安全体系的重要一环。
  一般的实例代码中，目前认为可以在需要关注返回值的时候进行添加，
  因为，往往用户端没有这种返回值检查退出的机制，我们认为，用户程序，
  只有在十分关注的地方才会有如此的需要，这时，加入手动的if判断就行了.
  再特殊就是用户有自己的错误处理机制了


>10:14 2009-8-19
 今天要把bkc模块的get node函数添加进来
 dlist 要加入remove nnode, 和remove all node, remove head, remove tail


>目前，我们认为，流程控制不能被去掉，
 对参数做检查，是正常流程中的一环，所以不能被去掉


>bkc_stack中的一些更新，check_throw，应该可以有一个reason参数，以得到
 返回的具体原因。所以从这个模块的check_throw以后需要添加这个参数.
 也许应该新命名一个检查函数

 这也就是说，如果以后有新的机制，最好用新的名字来替换.老的名字
 在这里可能涉及太多的修改.恩，新的机制.

>一个结构怎么保证其完整性呢?
 如果这个结构被篡改了怎么办呢？
 加检测的标志，结构中添加一个成员，其值为魔幻值，
 那么检测这个值，看数据是否被篡改.

 进一步怎么检测数据是否被篡改呢？
 ck32算法，放到结构中，也许有用，稍后来看看这个。

>reset 有待完成， 因为要完成dlist的remove all
 完成了之后还要测试.

>[修改提醒]
 在bkc_dlist模块添加了remove all, remove head, remove tail, remove n
 的操作

>从这里(if , else 语句的可行性)，我们可以看出设计的重要性.


>[need to do]
 现在每个模块都是手动添加依赖库，之后要用脚本来实现这些依赖.
 手动添加了依赖的库为
 bkc_stack

 注意目前有两个模块还没有完全，彻底的测试，我们需要做的就是
 规划好模块的依赖，然后进行比较彻底的测试.
 这些模块中的设计文档都要好好整理一下，
 最好每个模块有一图画或者童话故事加入。

>[need to do]
 也许BKC_DLIST_OPCODE_FIND_NSPEC_NODE
 中对传入的比较函数的参数非空的判断有些冗余，因为这完全取决于
 一件事，用户的比较函数是否用到了这个clue_p


>[new adding]
 13:06 2009-8-24
 今天已经加入queue这个数据结构.
############################















>[recording happily \]
###########################


>[要做的事list]

>
bkc_string.c模块中添加了四个功能函数需要测试
>
bkc_string.c中还需要继续实现的几个功能函数是:
a1.int bkc_string_cmpspec(bkc_string_t *dstr_p, int dspos , int dlen,
        bkc_string_t *sstr_p, int sspos, int slen);
a2.
int bkc_string_cpyspec(bkc_string_t *dstr_p, int dpos, bkc_string_t *sstr_p,
        int spos, int *len_p, bkc_string_cpy_mode_m mode);
注意多了一个mode,这是根据实际需要产生的需求, 属于完善性质的.
a3.
bkc_string_t *bkc_string_dupspec(bkc_string_t *str_p, int spos, int *len_p);
a4.
完成后要进行相应的测试和相应的替换.
主要是要替换相应的spec到非spec的实现.

int bkc_string_insnchar(bkc_string_t *str_p, int pos, char ch);
char bkc_string_getnchar(bkc_string_t *dstr_p, int pos);
这两个函数已经添加但还没有测试.

>
1. 由于bkc_stack中增加了errthrow，sucret， 并去掉了
   BKC_STACK_SPF_CKSRET.
   也许之前的模块可以考虑去掉这种方式。(string dlist的两个模块)

2. 有必要建立一个模块更迭时间表，这样可以清楚的知道，之前那些模块
   可能需要进行机制的替换
   a
   c--------b
   d----e-----f-------g
   从底层往上来，一旦上层有相关的修改，下层就可以考虑是否可以采用新的
   机制来实现，注意基本接口不改变，增加稳定性才是目的

3.13:02 2009-8-31
  目前要修整的模块，而且还没有修整的模块列表为
   bkc_stack  bkc_queue bkc_regex
  注意，需要在主makefile中，把这些模块以及 bkc_string这个模块加入大包.

4. 模块之间的依赖关系，最好整理一张图，放进来，
  这张图很重要，也需要不停进行更新

5. 注意要准备加入： string_reinfo这个接口

6. dlist 也许需要加入dlsit之间的合并接口，这在后面用到的时候来做.

>[要做的事list\]
###########################






>[relative and hints]
>
缩写临时总结
ta ｜ ts
ta表示to be added
ts表示to be tested(需要继续进行测试的函数)

>

###########################



>[临时笔记本]
>
    BKC_DITT(BKC_STACK_RET_SUC, 0);
    bkc_stack_t *stack_p = NULL;

    BKC_FLOWCONTROL_TRY {
        bkc_dlist_t *dlist_p = NULL;
        bkc_dlist_operator_t op;

        stack_p = BKC_MALLOC(sizeof(bkc_stack_t));
        BKC_FC_CKTHROW(stack_p != NULL, 1, BKC_STACK_RET_ERR);

        bkc_dlist_definit_op(&op);
        op.opcode = BKC_DLIST_OPCODE_CREATE_LIST;
        dlist_p = bkc_dlist_create(&op);
        BKC_FC_CKTHROW(dlist_p != NULL, 2, BKC_STACK_RET_ERR);
        BKC_RF(stack_p)->dlist_p = dlist_p;
        BKC_CKPRT(BKC_RF(stack_p)->dlist_p != NULL);
    }

    BKC_FLOWCONTROL_CATCH {
        BKC_FC_CASE (1) {
            stack_p = NULL;
            BKC_FC_BREAK;
        }
        BKC_FC_CASE (2) {
            BKC_SFREE(stack_p);
            stack_p = NULL;
            BKC_FC_BREAK;
        }
        BKC_FC_DEFAULT {
            BKC_FC_BREAK;
        }
    }

    BKC_CKPRET(stack_p != NULL);
    BKC_RETURN(stack_p);


>[临时笔记本]
###########################



>[观点杂记]

>dlist可以做成一个命令解释器
>dlist可以做成一个状态跳转机器
>用户可以直接得到第一项, 下一项操作, 在指定指针前面或者后面来插入.
>dlist工程的主线文档由以下几个组成
   main_points(主旨, 怎么用)
   模块的测试进度
   文档沙河
       注意事项,
       如何保持头脑清醒
       如何去发现
       测试方法, 架构测试方法
       本工程来来由历史, 源头性故事.

>
>[观点杂记\]
##########################
